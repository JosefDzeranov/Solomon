#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

const int maxn = 1005;

long long int mas[maxn][maxn];
int pr[maxn][maxn];
bool used[maxn][maxn];

int ans = 1;

int x[] = {0, 0, 1, -1};
int y[] = {1, -1, 0, 0};
int n, m;

void dfs(int a, int b) {

	used[a][b] = true;

	for (int i = 0; i < 4; i++){
		int na, nb;
		na = a + x[i];
		nb = b + y[i];
		if (na >= 0 && na < n && nb >= 0 && nb < m)
			if (mas[a][b] == mas[na][nb] + 1) {
				if (!used[na][nb])
					dfs(na, nb);
				pr[a][b] = max(pr[a][b], pr[na][nb] + 1);
			}
	}

	used[a][b] = 2;
	ans = max(ans, pr[a][b]);
}

int main() {

	//freopen("sherlocked.in", "r", stdin);
	//freopen("sherlocked.out", "w", stdout);

	
	cin >> n >> m;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			cin >> mas[i][j];
			pr[i][j] = 1;
			used[i][j] = false;
		}


	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (!used[i][j])
				dfs(i, j);

	cout << ans << endl;



	return 0;
}

/*
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int n, m;
vector<vector<int> > a, dp;

int get(int i, int j)
{
     if (dp[i][j] != -1)
          return dp[i][j];
     int best = 1;
     if (i != 0 && a[i - 1][j] == a[i][j] + 1)
          best = max(best, get(i - 1, j) + 1);
     if (i != n - 1 && a[i + 1][j] == a[i][j] + 1)
          best = max(best, get(i + 1, j) + 1);
     if (j != 0 && a[i][j - 1] == a[i][j] + 1)
          best = max(best, get(i, j - 1) + 1);
     if (j != m - 1 && a[i][j + 1] == a[i][j] + 1)
          best = max(best, get(i, j + 1) + 1);
     return dp[i][j] = best;
}

int main()
{
     ifstream in("sherlocked.in");
     ofstream out("sherlocked.out");
     in >> n >> m;
     a = vector<vector<int> >(n, vector<int>(m));
     dp = vector<vector<int> >(n, vector<int>(m, -1));
     for (int i = 0; i < n; i++)
          for (int j = 0; j < m; j++)
               in >> a[i][j];
     int ans = 1;
     for (int i = 0; i < n; i++)
          for (int j = 0; j < m; j++)
               ans = max(ans, get(i, j));
     out << ans << "\n";
}
*/