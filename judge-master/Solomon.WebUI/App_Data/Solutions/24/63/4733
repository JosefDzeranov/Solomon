#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

const int maxn = 1005;

long long int mas[maxn][maxn];
int pr[maxn][maxn];
bool used[maxn][maxn];


int ans = 1;
int x[] = {0, 0, 1, -1};
int y[] = {1, -1, 0, 0};
int n, m;

void dfs(int a, int b) {

	used[a][b] = true;
	for (int i = 0; i < 4; i++){
		int na, nb;
		na = a + x[i];
		nb = b + y[i];
		if (na >= 0 && na < n && nb >= 0 && nb < m)
			if (mas[a][b] + 1 == mas[na][nb])
			{
				if (!used[na][nb])
					dfs(na, nb);
				pr[a][b] = max(pr[a][b], pr[na][nb] + 1);
			}
	}

	ans = max(ans, pr[a][b]);
}


int main() {

	//freopen("sherlocked.in", "r", stdin);
	//freopen("sherlocked.out", "w", stdout);

	
	cin >> n >> m;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			cin >> mas[i][j];
			pr[i][j] = 1;
			used[i][j] = false;
		}


	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (!used[i][j])
				dfs(i, j);

	cout << ans << endl;



	return 0;
}