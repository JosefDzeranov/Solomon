#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cmath>
#include <cassert>
#include <ctime>
#include <algorithm>
#include <sstream>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <cstdlib>
#include <cstdio>
#include <iterator>
#include <functional>
#include <bitset>
#define mp make_pair
#define pb push_back
#ifdef LOCAL
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
#define eprintf(...)
#endif
#define TIMESTAMP(x) eprintf("["#x"] Time : %.3lf s.\n",
clock()*1.0/CLOCKS_PER_SEC)
#define TIMESTAMPf(x,...) eprintf("[" x "] Time : %.3lf s.\n",
__VA_ARGS__, clock()*1.0/CLOCKS_PER_SEC)
#if ( _WIN32 || __WIN32__ )
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
using namespace std;
#define TASKNAME "volunteers"
#ifdef LOCAL
static struct __timestamper {
string what;
__timestamper(const char* what) : what(what){};
__timestamper(const string& what) : what(what){};
~__timestamper(){
TIMESTAMPf("%s", what.data());
}
} __TIMESTAMPER("end");
#endif
typedef long long ll;
typedef long double ld;
const int MAXN = 210000;
vector<int> g[2][MAXN];
int cntl[MAXN];
int cntr[MAXN];
ll ans;
int timer;
int n,m,k;
pair<int,int> dfs1(int v){
if (g[0][v].size() == 0) return mp(v - m, v - m);
pair<int,int> res = mp(1e9, -1e9);
for (int i = 0; i < (int)g[0][v].size(); i++){
pair<int,int> x = dfs1(g[0][v][i]);
res.first = min(res.first, x.first);
res.second = max(res.second, x.second);
}
cntr[res.second]++;
cntl[res.first]++;
return res;
}
pair<int,int> dfs2(int v){
if (g[1][v].size() == 0) return mp(v - k, v - k);
pair<int,int> res = mp(1e9, -1e9);
for (int i = 0; i < (int)g[1][v].size(); i++){
pair<int,int> x = dfs2(g[1][v][i]);
res.first = min(res.first, x.first);
res.second = max(res.second, x.second);
}
if (res.first) ans += cntr[res.first - 1];
if (res.second < n - 1) ans += cntl[res.second + 1];
return res;
}
int main(){
freopen(TASKNAME".in","r",stdin);
freopen(TASKNAME".out","w",stdout);
scanf("%d %d %d",&n,&m,&k);
for (int i = 0; i < n; i++){
int a, b;
scanf("%d %d",&a,&b);
--a, --b;
g[0][a].pb(i + m);
g[1][b].pb(i + k);
}
for (int i = 0; i < m - 1; i++){
int a;
scanf("%d", &a);
--a;
g[0][a].pb(i);
}
for (int i = 0; i < k - 1; i++){
int a;
scanf("%d", &a);
--a;
g[1][a].pb(i);
}
timer = 0;
dfs1(m - 1);
for (int i = 1; i < n; i++)
cntr[i] += cntr[i-1];
for (int i = n-2; i >= 0; i--)
cntl[i] += cntl[i+1];
timer = 0;
dfs2(k - 1);
ans = k * 1LL * m - ans;
cout << ans << endl;
return 0;
}