import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Olympics {
    private static class FastScanner implements AutoCloseable {
        BufferedReader reader;
        StringTokenizer parcer;
        
        FastScanner(InputStream istream) {
            reader = new BufferedReader(new InputStreamReader(istream));
        }
        
        String nextToken() throws IOException {
            while (parcer == null || !(parcer.hasMoreTokens())) {
                String line = reader.readLine();
                
                if (line == null)
                    return null;
                parcer = new StringTokenizer(line);
            }
            return parcer.nextToken();
        }
        
        int nextInt() throws IOException {
            return Integer.parseInt(nextToken());
        }

        @Override
        public void close() throws Exception {
            if (reader != null)
                reader.close();
        }
    }
    
    public static void main(String[] args) throws Exception {
        try (
            FastScanner reader = new FastScanner(System.in);
            PrintWriter writer = new PrintWriter(System.out, true)
        ) {
            int n = reader.nextInt();
            
            int[] participants = new int[] {0, 0, 0};
            for (int i = 1; i <= n; i++) {
                int x = reader.nextInt();
                participants[x - 1]++;
            }
            
            Arrays.sort(participants);
            writer.println(participants[0]);
        }
    }
}