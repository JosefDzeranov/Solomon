#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<int> LongSum(vector<int> a, vector<int> b){
	int length = 0;
	if (a.size() > b.size()){
		length = a.size();
		for (int i = length; i <= b.size(); i++)
			b.push_back(0);
		b.push_back(0);
	}
	else{
		length = b.size();
		for (int i = length; i < a.size(); i++)
			a.push_back(0);
		a.push_back(0);
	}
	a.push_back(0);
	b.push_back(0);
	for (int ix = 0; ix < length; ix++)
	{
		b[ix] += a[ix]; // суммируем последние разряды чисел
		b[ix + 1] += (b[ix] / 10); // если есть разряд для переноса, переносим его в следующий разряд
		b[ix] %= 10; // если есть разряд для переноса он отсекается
	}
	length = b.size();
	if (b[length - 1] == 0){
		length--;
		b.pop_back();
	}
	return b;
}

vector <int> LongMult(vector<int> a, vector<int> b){
	int length = a.size() + b.size() + 1;
	vector<int> c; c.resize(length);
	for (int ix = 0; ix < a.size(); ix++)
		for (int jx = 0; jx < b.size(); jx++)
			c[ix + jx] += a[ix] * b[ix];
	int LL = length;
	for (int ix = 0; ix < LL; ix++)
	{
		if (ix + 1 == c.size()){
			c.push_back(c[ix] / 10);
			length++;
		}
		else
			c[ix + 1] += c[ix] / 10;
		c[ix] %= 10;
	}
	while (c[length - 1] == 0){
		length--;
		c.pop_back();
	}
	return c;
}

int main(){
	string s;
	cin >> s;
	unsigned long long int num = 0;
	vector <int> rez; rez.push_back(0);
	for (int i = 0; i < s.size(); i++)
		if (s[i] == '*'){
			vector <int> t1; t1.push_back(2);
			vector <int> t2; t2.push_back(1);
			if (s.size() - i - 1 == 0)
				t2[0] = 1;
			else{
				for (int j = 0; j < s.size() - i - 1; j++)
					t2 = LongMult(t1, t2);
			}
			rez = LongSum(rez, t2);
		}
	for (int i = rez.size()-1; i > -1; i--)
		cout << rez[i];
	return 0;
}