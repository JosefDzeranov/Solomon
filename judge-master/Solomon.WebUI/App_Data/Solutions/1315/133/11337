#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct url {
	vector<string> domens;
	vector<string> paths;
	int c;

public:
	url(): c(0) {}

	void parse(string str) {
		int i = 0;
		string id;
		if (str[i] == '*') {
			i+=2;
		}
		while (isalpha(str[i])) {
			id += str[i];
			i++;
		}
		domens.push_back(id);
		while (str[i] == '.') {
			i++;
			id = "";
			while (isalpha(str[i])) {
				id += str[i];
				i++;
			}
			domens.push_back(id);
		}
		while (str[i] == '/') {
			i++;
			if (str[i] == '*') {
				break;
			} else {
				id = "";
				while (isalpha(str[i])) {
					id += str[i];
					i++;
				}
				paths.push_back(id);
			}
		}
	}

	void compare(url t) {
		bool b = false;
		if (t.domens.size() == domens.size()) {
			for (int i = 0; i < domens.size(); i++) {
				if (domens[i] != t.domens[i]) {
					b = true;
				}
			}
		} else {
			return;
		}
		if (t.paths.size() == paths.size()) {
			for (int i = 0; i < paths.size(); i++) {
				if (paths[i] != t.paths[i]) {
					b = true;
				}
			}
		} else {
			return;
		}
		if (!b)
			c++;

	}
};

int main() {
	int n, p;
	cin >> n >> p;
	char buf[51];
	cin.getline(buf, 50);
	url *templates = new url[n]();
	for (int i = 0; i < n; i++) {
		cin.getline(buf, 50);
		templates[i].parse(buf);
	}
	int k;
	cin >> k;
	cin.getline(buf, 50);
	url *src = new url[k]();
	for (int i = 0; i < k; i++) {
		cin.getline(buf, 50);
		src[i].parse(buf);
	}
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < n; j++) {
			src[i].compare(templates[j]);
		}
		cout << src[i].c << endl;
	}
	return 0;
}