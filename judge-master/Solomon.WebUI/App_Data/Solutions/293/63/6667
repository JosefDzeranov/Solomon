#include <stdio.h>
#include <conio.h>
#include <iostream>
#include <time.h>

typedef unsigned long long ULL;
using namespace std;

enum side{
     top,rightt,leftt,bottom,no
     };
const ULL N=1003,M=1003;
ULL n,m;
ULL a[N][M], visited[N][M];
ULL maximum=0,maximumi=0;

void search(int x, int y, int count, side ss)
{
     count++;
     if(count>visited[x][y])
     {
     visited[x][y]=count;
     if(ss!=no)
     {
     if(ss==top)
     {
     if(a[x+1][y]==a[x][y]+1)
     search(x+1,y,count,top);
     if(a[x][y+1]==a[x][y]+1)
     search(x,y+1,count,leftt);
     if(a[x][y-1]==a[x][y]+1)
     search(x,y-1,count,rightt);
     }
     else
     if(ss==rightt)
     {
     if(a[x+1][y]==a[x][y]+1)
     search(x+1,y,count,top);
     if(a[x-1][y]==a[x][y]+1)
     search(x-1,y,count,bottom);
     if(a[x][y-1]==a[x][y]+1)
     search(x,y-1,count,rightt);
     }
     else
     if(ss==leftt)
     {
     if(a[x+1][y]==a[x][y]+1)
     search(x+1,y,count,top);
     if(a[x-1][y]==a[x][y]+1)
     search(x-1,y,count,bottom);
     if(a[x][y+1]==a[x][y]+1)
     search(x,y+1,count,leftt);
     }
     else
     if(ss==bottom)
     {
     if(a[x-1][y]==a[x][y]+1)
     search(x-1,y,count,bottom);
     if(a[x][y+1]==a[x][y]+1)
     search(x,y+1,count,leftt);
     if(a[x][y-1]==a[x][y]+1)
     search(x,y-1,count,rightt);
     }
     }
     else
     {
     if(a[x+1][y]==a[x][y]+1)
     search(x+1,y,count,top);
     if(a[x-1][y]==a[x][y]+1)
     search(x-1,y,count,bottom);
     if(a[x][y+1]==a[x][y]+1)
     search(x,y+1,count,leftt);
     if(a[x][y-1]==a[x][y]+1)
     search(x,y-1,count,rightt);
     }
     if(maximum<count)
	 maximum=count;
}
}

main()
{
      
      int i,j;
      cin >> n >> m;
      
      for(i=1;i<n+1;i++)
      for(j=1;j<m+1;j++)
      {
      cin >> a[i][j];
	  visited[i][j]=0;  
  }
  if(n>1001 || m>1001){
  cout << "NONONO";return 0;}
      for(i=0;i<n+2;i++)
      {
      a[0][i]=0;
      a[i][0]=0;
      a[n+1][i]=0;
      a[i][m+1]=0;
      }
      
      for(i=m;i>0;i--)
      for(j=n;j>0;j--)
      if(visited[j][i]==0)
      search(j,i,0,no);
      
      cout << maximum;
      
      /*4 4
1 2 3 4
8 7 6 5
9 8 7 6
9 9 10 11*/
}
