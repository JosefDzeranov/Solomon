#include <stdio.h>
#include <conio.h>
#include <iostream>

typedef int ULL;
using namespace std; 

const ULL N=1002,M=1002;
ULL n,m;
ULL a[N][M]; 
bool visited[N][M];
ULL maximum=0,maximumi=0;

ULL searchv(ULL xv, ULL yv, ULL countv)
{
    countv++;
    int cv=0,ccv=0;
    if(visited[xv][yv]==false)
    {
    visited[xv][yv]=true;
    if(a[xv+1][yv]==a[xv][yv]+1){
ccv+=searchv(xv+1,yv,countv);cv++;}
     if(a[xv-1][yv]==a[xv][yv]+1){
     if(cv==0)
ccv+=searchv(xv-1,yv,countv);
else
{
int ccv2=searchv(xv-1,yv,countv);
if(ccv2>ccv)ccv=ccv2;
}
cv++;}
     if(a[xv][yv+1]==a[xv][yv]+1){
                                  if(cv==0)
ccv+=searchv(xv,yv+1,countv);
else
{
int ccv3=searchv(xv-1,yv,countv);
if(ccv3>ccv)ccv=ccv3;
}
cv++;}
     if(a[xv][yv-1]==a[xv][yv]+1){
                                  if(cv==0)
ccv+=searchv(xv,yv-1,countv);
else
{
int ccv4=searchv(xv-1,yv,countv);
if(ccv4>ccv)ccv=ccv4;
}
cv++;}
if(cv==0)
return countv;
else return ccv;
}

}

ULL searchn(ULL xn, ULL yn, ULL countn)
{
    countn++;
    int cn=0,ccn=0;
    if(visited[xn][yn]==false)
    {
    visited[xn][yn]=true;
    if(a[xn+1][yn]==a[xn][yn]-1){
ccn+=searchn(xn+1,yn,countn);cn++;}
     if(a[xn-1][yn]==a[xn][yn]-1){
                                  if(cn==0)
ccn+=searchn(xn-1,yn,countn);
else
{
    int ccn2=searchn(xn-1,yn,countn);
    if(ccn2>ccn)ccn=ccn2;
}
cn++;}
     if(a[xn][yn+1]==a[xn][yn]-1){
                                  if(cn==0)
ccn+=searchn(xn,yn+1,countn);
else
{
    int ccn3=searchn(xn-1,yn,countn);
    if(ccn3>ccn)ccn=ccn3;
}
cn++;}
     if(a[xn][yn-1]==a[xn][yn]-1){
                                  if(cn==0)
ccn+=searchn(xn,yn-1,countn);
else
{
    int ccn4=searchn(xn-1,yn,countn);
    if(ccn4>ccn)ccn=ccn4;
}
cn++;}
if(cn==0)
return countn;
else return ccn;
}
}

void search(ULL x, ULL y, ULL count)
{
     count++;
     count += searchv(x,y,0);
     count += searchn(x,y,0);
     if(maximum<count-2)
	 maximum=count-2;
}

main()
{
      
      ULL i,j;
      cin >> n >> m;
      
      for(i=1;i<n+1;i++)
      for(j=1;j<m+1;j++)
      {
      cin >> a[i][j];
	  visited[i][j]=false;  
  }
      for(i=0;i<n+2;i++)
      {
      a[0][i]=0;
      a[i][0]=0;
      a[n+1][i]=0;
      a[i][m+1]=0;
      }
      
      for(i=1;i<n+1;i++)
      for(j=1;j<m+1;j++)
      if(visited[i][j]==false)
      search(i,j,0);
      
      cout << maximum;
}
