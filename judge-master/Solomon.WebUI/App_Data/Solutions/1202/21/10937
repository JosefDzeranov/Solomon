program A;

type
        Tarr = array [1..100, 1..2] of Integer;
        Tar = array [1..100, 1..4] of Integer;

procedure ReadData (var n, m : Integer; var ar : Tarr);

var
        i : Integer;

begin
        ReadLn (n, m);

        for i := 1 to m do
                ReadLn (ar[i, 1], ar[i, 2]);
end;

procedure Swap (var a, b : Integer);

var
        t : Integer;

begin
        t := a;
        a := b;
        b := t
end;

function F (const m : Integer; ar : Tarr; var arpr, arsr : Tar) : Integer;

var
        i, cnt, b, j : Integer;

begin
        cnt := 0;

        FillChar (arpr, SizeOf (arpr), 0);
        FillChar (arsr, SizeOf (arpr), 0);

        for i := 1 to m do
        begin
        for j := 1 to m do
                if (ar[i, 1] <> ar[i, 2]) and (ar[ar[i, 2], 2] = ar[i, 1]) and (ar[ar[i, 2], 1] <> ar[ar[i, 2], 2]) then
                begin
                        arsr[i, 1] := ar[i, 2];
                        arsr[i, 2] := ar[i, 1];
                        arsr[i, 3] := ar[ar[i, 2], 2];
                        arsr[i, 4] := ar[ar[i, 2], 1];
                        Swap (ar[ar[i, 2], 2], ar[i, 2]);
                        Inc (cnt)
                end
                else
                if (ar[i, 1] <> ar[i, 2]) and (ar[ar[i, 1], 2] = ar[i, 1]) and (ar[ar[i, 1], 1] <> ar[ar[i, 1], 2]) then
                begin
                        arsr[i + j - 1, 1] := ar[i, 2];
                        arsr[i + j - 1, 2] := ar[i, 1];
                        arsr[i + j - 1, 3] := ar[ar[i, 1], 2];
                        arsr[i + j - 1, 4] := ar[ar[i, 1], 1];
                        Swap (ar[ar[i, 1], 1], ar[i, 1]);
                        Inc (cnt)
                end;
        end;

        for i := 1 to m do
                if ar[i, 1] <> ar[i, 2] then
                begin
                        arpr[i, 1] := ar[i, 1];
                        arpr[i, 2] := ar[i, 2];
                        Inc (cnt)
                end;

        F := cnt
end;

function F1 (const m : Integer; const ar : Tarr; var arpr : Tar) : Integer;

var
        i, cnt : Integer;

begin
        cnt := 0;

        FillChar (arpr, SizeOf (arpr), 0);

        for i := 1 to m do
                if ar[i, 1] <> ar[i, 2] then
                begin
                        arpr[i, 1] := ar[i, 1];
                        arpr[i, 2] := ar[i, 2];
                        Inc (cnt)
                end;

        F1 := cnt
end;

procedure Print1 (const n, m : Integer; var ar : Tarr);

var
        i, cnt, b : Integer;
        arpr, arsr : Tar;

begin
        if (F1 (m, ar, arpr)) <= (F (m, ar, arpr, arsr)) then
        begin
                WriteLn (F1 (m, ar, arpr));
                FillChar (arsr, SizeOf (arsr), 0)
        end
        else
                WriteLn (F (m, ar, arpr, arsr));

         for i := 1 to m do
                if arsr[i, 1] > 0 then
                        if (arsr[i, 1] > arsr [i, 2]) and (arsr[i, 1] = arsr [i, 4]) and (arsr[i, 2] = arsr [i, 3]) then
                                WriteLn (arsr[i, 2], ' ', arsr[i, 1], ' ', arsr[i, 4], ' ', arsr[i, 3])
                        else
                                WriteLn (arsr[i, 1], ' ', arsr[i, 2], ' ', arsr[i, 3], ' ', arsr[i, 4]);

        for i := 1 to m do
                if arpr[i, 1] > 0 then
                        WriteLn (arpr[i, 2], ' ', arpr[i, 1], ' ', arpr[i, 1])
end;

var
        n, m, i, cnt : Integer;
        ar : Tarr;

begin
        ReadData (n, m, ar);

        cnt := 0;

        for i := 1 to m do
                if ar[i, 1] = ar[i, 2] then
                        Inc (cnt);

        if cnt = m then
                WriteLn (0)
        else
                Print1 (n, m, ar)
end.