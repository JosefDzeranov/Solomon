#include <iostream>
#include <vector>

using namespace std;

vector < vector <long long int> > matrix;
long long int m, n, k;



/*bool prove(int i, int j) {

	int nado = 4;
	int cnt = 0;
	if (i - 1 >= 0){
		if (matrix[i - 1][j] == -1)
			cnt++;
	}
	else
		nado--;
	if (i + 1 < m){
		if (matrix[i + 1][j] == -1)
			cnt++;
	}
	else
		nado--;
	if (j - 1 >= 0){
		if (matrix[i][j - 1] == -1)
			cnt++;
	}
	else
		nado--;
	if (j + 1 < n){
		if (matrix[i][j + 1] == -1)
			cnt++;
	}
	else
		nado--;
	if (cnt == nado)
		return true;
	else
		return false;
}*/


void dfs(int i, int j, int cnt) {

	matrix[i][j] = cnt;
	if (i - 1 >= 0)
		if (matrix[i - 1][j] == 0)
			dfs(i - 1, j, cnt);
	if (i + 1 < m)
		if (matrix[i + 1][j] == 0)
			dfs(i + 1, j, cnt);
	if (j - 1 >= 0)
		if (matrix[i][j - 1] == 0)
			dfs(i, j - 1, cnt);
	if (j + 1 < n)
		if (matrix[i][j + 1] == 0)
			dfs(i, j + 1, cnt);

}

int main() {

	cin >> m >> n >> k;
	matrix.resize(m);
	for (int i = 0; i < m; i++)
		matrix[i].assign(n, 0);

	for (int i = 0; i < k; i++)
	{
		int a, b;
		cin >> a >> b;
		matrix[a - 1][b - 1] = -1;
	}

	int cnt = 0;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
		{
			if (matrix[i][j] == 0) {
				dfs(i, j, cnt + 1);
				cnt++;
			}

		}
	/*for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++)
			cout << matrix[i][j] << " ";
		cout << endl;
		}
*/
	cout << cnt << endl;

	return 0;
}