#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;
long long mas[100000];
	long long cnt[100000] = {0};

int main()
{
	int n;
	cin >> n;
	int k;
	cin >> k;
	
	for (int i = 0; i < n; i++)
		cin >> mas[i];
	for (int i = 0; i < k; i++)
		cnt[0] += mas[i];
	for (int i = 1; i < n - k + 1; i++)
		cnt[i] = cnt[i - 1] - mas[i - 1] + mas[i + k - 1];
	int x = -1;
	long long maxx = -1;
	long long maxx2 = -1;
	vector<long long> v;
	for (int i = 0; i < n - 1; i++)
		if (cnt[i] > maxx || i == 0)
		{
			maxx = cnt[i];
			x = i;
			maxx2 = 0;
			for (int j = max(0, i - k + 1); j <= min(n - 2, i + k - 1); j++)
				v.push_back(mas[j]);
			sort(v.rbegin(), v.rend());
		}
		else if (cnt[i] == maxx)
		{
			vector <long long> v2;
			for (int j = max(0, i - k + 1); j <= min(n - 2, i + k - 1); j++)
				v2.push_back(cnt[j]);
			sort(v2.rbegin(), v2.rend());
			int t = -1;
			for (int j = 0; j < min(v.size(), v2.size()) ; j++)
				if (v[j] > v2[j])
				{
					t = 0;
					break;
				}
				else if (v2[j] > v[j])
				{
					t = 1;
					break;
				}
			if (t == -1)
				if (v2.size() > v.size())
					t = 1;
				else
					t = 0;
			if (t == 1)
			{
				maxx = cnt[i];
				x = i;
				v = v2;
			}
		}
	for (int i = max(0, x - k + 1); i <= min(n - 2, x + k - 1); i++)
		cnt[i] = 0;
	maxx = -1;
	for (int i = 0; i < n - 1; i++)
		if (cnt[i] > maxx)
		{
			maxx = cnt[i];
		}
	cout << maxx;
	return 0;
}