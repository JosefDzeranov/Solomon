package com.acidka;

public class C {
	
	public static int find(int[][][] a, int posi, int posj, int n, int m){
		int length = 1, newlength = 0;
		if(a[posi][posj][1] == 1)
			length = a[posi][posj][2];
		else{
			if(posi > 0)
				if(a[posi-1][posj][0] == a[posi][posj][0]+1) {newlength = 1+find(a, posi-1, posj, n, m); if(newlength > length) length = newlength;}
			if(posj > 0)
				if(a[posi][posj-1][0] == a[posi][posj][0]+1) {newlength = 1+find(a, posi, posj-1, n, m); if(newlength > length) length = newlength;}
			if(posj < m-1)
				if(a[posi][posj+1][0] == a[posi][posj][0]+1) {newlength = 1+find(a, posi, posj+1, n, m); if(newlength > length) length = newlength;
				}
			if(posi < n-1)
				if(a[posi+1][posj][0] == a[posi][posj][0]+1) {newlength = 1+find(a, posi+1, posj, n, m); if(newlength > length) length = newlength;}
			if(newlength == 0)
				if(posi < n-1)
					length = find(a, posi+1, posj, n, m);
				else if(posi == n-1 && posj < m-1)
					length = find(a, 0, posj+1, n, m);
			//System.out.println(newlength+"   "+posj);
		}
		return length;
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try{
			int n, m, max = 1, i, j;
			java.util.Scanner s = new java.util.Scanner(System.in);
			n = s.nextInt();
			m = s.nextInt();
			int[][][] a= new int[n][m][3]; 
			for(i = 0; i < n; i++)
			{
				for(j = 0; j < m; j++)
				{
					a[i][j][0] = s.nextInt();
					a[i][j][1] = 0;
				}
			}
			for(i = 0; i < n; i++)
			{
				for(j = 0; j < m; j++)
				{
					a[i][j][2] = find(a, 0, 0, n, m);
					a[i][j][1] = 1;
					if( a[i][j][2] > max ) max = a[i][j][2];
				}
			}
			System.out.println(max);
			s.close();
		}
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
