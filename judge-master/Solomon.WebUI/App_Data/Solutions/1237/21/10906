const
  MaxN = 10;
  MaxM = 100;

type
  TAn = record
    N1, C1, N2, C2: ShortInt;
  end;

var
  C: array [1..10, 1..10] of longint;
  N, M, Len, Start, SNum, MNum, I: longint;
  Swaps, Moves: array [1..100] of TAn;
  A: array [0..10] of Integer;
  U: array [1..10] of Boolean;

procedure ReadData;
var
  I, J, K: longint;
begin
  Read(N, M);
  FillChar(C, sizeof(C), 0);
  for I := 1 to M do
  begin
    Read(J, K);
    Inc(C[K, J]);
  end;
  SNum := 0;
  MNum := 0;
end;

procedure AddSwap(N1, C1, N2, C2: ShortInt);
begin
  Inc(SNum);
  Swaps[SNum].N1 := N1;
  Swaps[SNum].C1 := C1;
  Swaps[SNum].N2 := N2;
  Swaps[SNum].C2 := C2;
  Dec(C[N1, C1]); 
  Inc(C[N1, C2]);
  Dec(C[N2, C2]); 
  Inc(C[N2, C1]);
end;

procedure AddMove(N1, C1, N2: ShortInt);
begin
  Inc(MNum);
  Moves[MNum].N1 := N1;
  Moves[MNum].C1 := C1;
  Moves[MNum].N2 := N2;
  Dec(C[N1, C1]);
  Inc(C[N2, C1]);
end;

function FindCycle(Num, Pos: longint): Boolean;
var
  I: longint;
  R: Boolean;
begin
  FindCycle := False;
  A[Pos] := Num;
  U[Num] := True;
  
  if Num <> Start then
    if C[Num, Start] > 0 then
    begin
      FindCycle := True;
      Len := Pos;
      Exit;
    end;
  
  for I := 1 to N do
    if (I <> Num) and not U[I] then
      if (C[Num, I] > 0) and (C[I, Start] > 0) then
      begin
        R := FindCycle(I, Pos + 1);
        if R then
        begin
          FindCycle := True;
          Exit;
        end;
      end;
  
  for I := 1 to N do
    if (I <> Num) and not U[I] then
      if C[Num, I] > 0 then
      begin
        R := FindCycle(I, Pos + 1);
        if R then
        begin
          FindCycle := True;
          Exit;
        end;
      end;
  
  U[Num] := False;
end;

procedure ProcessCycle;
var
  i: longint;
begin
  for i := Len - 1 downto 1 do
    AddSwap(A[i], A[i + 1], A[i + 1], Start);
end;

procedure DoCycles;
begin
  for Start := 1 to N do
  begin
    FillChar(U, sizeof(U), False);
    while FindCycle(Start, 1) do
      ProcessCycle;
  end;
end;

procedure DoMoves;
var
  I, J, K: Integer;
begin
  for I := 1 to N do
    for J := 1 to N do
      if (I <> J) then
        if C[I, J] > 0 then
          for K := 1 to C[I, J] do
            AddMove(I, J, J);
end;

begin
  ReadData;
  DoCycles;
  DoMoves;
  WriteLn(SNum + MNum);
  for I := 1 to SNum do
    WriteLn(Swaps[I].N1, ' ', Swaps[I].C1, ' ',
            Swaps[I].N2, ' ', Swaps[I].C2);
  for I := 1 to MNum do
    WriteLn(Moves[I].N1, ' ', Moves[I].C1, ' ', Moves[I].N2);
end.